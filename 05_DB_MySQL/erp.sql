/*
	DB 모델링
    1. 개념적 모델링
		- 엔티티(테이블=개체) 추출
        - 엔티티 간의 관계설정
    2. 논리적 모델링
		- 속성(컬럼) 추출
        - 정규화 작업 (1, 2, 3) ---> 이 이상으로 가면 역정규화
    3. 물리적 모델링
		- 테이블 실질적으로 작성 (CREATE문 작성)
    
    *정규화(Nomalization)
	- 불필요한 데이터의 중복을 제거하여 데이터모델을 구조화하는 것
    - 효율적인 자료 저장 및 데이터 무결성을 보장하고 오류를 최소화하여 안정성을 보장하기 위해 적용함
    
		제 1 정규화 : 복수의 속성값을 갖는 속성을 분리
        제 2 정규화 : 주 식별자에 종속되지 않는 속성을 분리
        제 3 정규화 : 속성에 종속적인 속성을 제거
*/
/*
	#과제(~ 06/10) : 사용자 or 사원 관련 정보 들어가는 테이블 하나 CREATE문 작성해서 제출!!
    --> PRIMARY KEY : AUTO_INCREMENT 추가!

    MySQL (오라클과의 차이점)
    - 데이터 타입
    1. 문자
		- CHAR / **VARCHAR** (2가 아님) : 고정 및 가변 길이 문자, 반드시 크기 지정
		- **TEXT** : 매우 긴 문자열을 저장하는 데 사용
	2. 숫자
		- **INT** : 정수값 저장하는 데 사용
        - FLOAT / DOUBLE : 부동소수점 저장하는 데 사용
        - DECIMAL : 고정소수점 저장하는 데 사용
	3. 날짜 및 시간
		- **DATE** : 날짜 저장하는 데 사용
        - TIME : 시간만 저장하는 데 사용
        - **DATETIME** / TIMESTAMP : 날짜와 시간을 함께 저장 (DEFAULT NOW()) : SYSDATE가 아닌 NOW 사용
	4. 불리언
		- BOOLEAN / BOOL : 참(TRUE) 또는 거짓(FALSE) 값을 저장하는 데 사용
	5. 이진 자료형
		- BLOB : 이진 데이터를 저장하는 데 사용. 이미지나 동영상과 같은 이진 파일
        ---> 실제로는 이미지나 동영상은 따로 관리 (URL만 문자형으로 저장)
*/

/* 
	외부 공용협업툴과 실시간 연동(API사용)되는 사내 ERP 시스템 만들기 (전사적 자원관리 시스템)
	공통 : 사용자/사원에 대한 테이블
	프로젝트관리 : SlackAPI (선택)
	일정관리 : Google Calendar API (선택)
	고객관계관리 : Notion API (선택)
	인적자원관리 :
	재무관리 : Notion API (선택)
	품질보증관리 :

	예)
    CREATE TABLE USER_INFO (
    USER_ID INT AUTO_INCREMENT PRIMARY KEY, -- 직원코드
    USER_PW VARCHAR(30) NOT NULL, -- 비밀번호
    NAME VARCHAR(30) NOT NULL, -- 이름
    AGE INT, -- 나이
    GENDER VARCHAR(10), -- 성별
    PHONE VARCHAR(30), -- 연락처
    EMAIL VARCHAR(100), -- 이메일 주소
    ADDRESS VARCHAR(100), -- 주소지
    ENT_DATE DATETIME DEFAULT NOW(), -- 입사일자
    DEPT_CODE VARCHAR(20), -- 부서명
    POSITION VARCHAR(20) -- 직급
    ); 
    -- MySQL에서만 구동 가능 (오라클과 명령어가 다름)
*/

DROP TABLE USER_INFO;

-- (~6/11까지 제출하기)
-- 프로젝트 관리 : 테이블 몇개든 상관없이 짜보시고 FOREIGN KEY까지 걸어보는 것까지!
-- 테이블 필요한 컬럼 짜기 힘드시다면 어떤 기능이 있어야 되는 지 정도로 제출해도 괜찮아요!

CREATE TABLE USER_INFO (    -- 사원정보
    USER_NO INT PRIMARY KEY AUTO_INCREMENT, -- (MySQL에서만 적용가능하여 에러 방지 임시 비활성화)
    ID VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR(300) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE,
    NAME VARCHAR(50) NOT NULL,
    PHONE VARCHAR(50) UNIQUE,
    ADDR VARCHAR(200),
	GENDER VARCHAR(10) CHECK (GENDER IN ('남','여')),
    BIRTH_DATE DATE,
    HIRE_DATE DATE DEFAULT (CURRENT_DATE),
    QUIT_DATE DATE,
    DEPT_NO INT,
    GRADE_NO INT
); 
CREATE TABLE DEPARTMENT(
	DEPT_NO INT PRIMARY KEY AUTO_INCREMENT,
    DEPT_NAME VARCHAR(100) NOT NULL,
    DEPT_COLOR VARCHAR(50)
);
CREATE TABLE GRADE(
	GRADE_NO INT PRIMARY KEY AUTO_INCREMENT,
	GRADE_NAME VARCHAR(100) NOT NULL
);

-- 컬럼명 타입 REFERENCES 테이블명(컬럼)
-- ON DELETE SET NULL / ON DELETE CASCADE 으로 CREATE 단계에서 컬럼 내 기재하거나 위와 같이 ALTER로 추가!

SELECT * FROM USER_INFO;

CREATE TABLE PROJECT (
	PROJ_NO INT AUTO_INCREMENT PRIMARY KEY,
    PROJ_NAME VARCHAR(100) NOT NULL,
    PROJ_DESC TEXT,
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR(30) CHECK (STATUS IN('진행 전', '진행중', '완료', '중단'))
);

CREATE TABLE PROJECT_MEMBERS (
	MEMBER_NO INT AUTO_INCREMENT PRIMARY KEY,
    USER_NO INT,
    PROJ_NO INT,
    ROLE VARCHAR(50)    
);

-- 프로젝트 : 업무들 = 1:M (일 대 다)
CREATE TABLE PROJECT_TASKS (
	TASK_NO INT AUTO_INCREMENT PRIMARY KEY,
    PROJ_NO INT,
	TASK_NAME VARCHAR(100) NOT NULL,
    TASK_DESC TEXT,
    STATUS VARCHAR(30) CHECK (STATUS IN('진행 전', '진행중', '완료', '중단')),
    START_DATE DATE,
    END_DATE DATE,
    PARENT_TASK_NO INT
);

-- (~6/12) 일정 관리 추가!

CREATE TABLE SCHEDULE(
	SCHEDULE_NO INT AUTO_INCREMENT PRIMARY KEY,
    SCHEDULE_TITLE VARCHAR(100) NOT NULL,
    SCHEDULE_DESC TEXT,
	START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR(30) CHECK (STATUS IN('진행 전', '진행중', '완료', '중단')),
    LOCATION VARCHAR(200),
    PROJ_NO INT,
    TASK_NO INT,
    USER_NO INT
);

CREATE TABLE SCHEDULE_MEMBERS(
	SCH_MEM_NO INT AUTO_INCREMENT PRIMARY KEY,
    USER_NO INT,
    SCHEDULE_NO INT        
);
-- (~6/13) 고객관계관리 / 인적자원관리 / 재무관리 / 품질보증관리
-- 가장 해볼 만 하다 싶은 거 1개만 하셔도 괜찮고, 아이디어 있으면 여러 개 하셔도 무방!

CREATE TABLE HUMAN_RESOURCES(
    HRM_NO INT AUTO_INCREMENT PRIMARY KEY,
    USER_NO INT,
    
);

CREATE TABLE CLIENTS(
    CLIENT_NO INT AUTO_INCREMENT PRIMARY KEY,
    PROJ_NO INT,

);

-- 고객관계관리
-- 고객마다 담당자가 지정된 상태(따라서 USER_NO INT 추가함)
CREATE TABLE CUSTOMER(
	CUSTOMER_NO INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    PHONE VARCHAR(20),
    EMAIL VARCHAR(100),
    COMPANY VARCHAR(100),
    USER_NO INT
);

-- 고객과의 계약 정보
CREATE TABLE CUSTOMER_CONTRACT(
	CONTRACT_NO INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    CONTECT TEXT,
    PAY INT,
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR(30) CHECK(STATUS IN ('계약전', '진행중', '완료', '파기')),
    CREATE_DATE DATETIME DEFAULT (CURRENT_DATE),
    CUSTOMER_NO INT
);

CREATE TABLE CUSTOMER_CLAIM(
	CLAIM_NO INT AUTO_INCREMENT PRIMARY KEY,
    TITLE VARCHAR(100) NOT NULL,
    CONTECT TEXT,
    PHOTO_URL VARCHAR(200),
    STATUS VARCHAR(30) CHECK(STATUS IN ('제출', '해결중', '완료')),
    CREATE_DATE DATETIME DEFAULT (CURRENT_DATE),
    CUSTOMER_NO INT
);

-- CUSTOMER: USER_NO
ALTER TABLE CUSTOMER ADD
FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
-- CUSTOMER_CONTRACT: CUSTOMER_NO
ALTER TABLE CUSTOMER_CONTRACT ADD
FOREIGN KEY (CUSTOMER_NO) REFERENCES CUSTOMER(CUSTOMER_NO);
-- CUSTOMER_CLAIM: CUSTOMER_NO
ALTER TABLE CUSTOMER_CLAIM ADD
FOREIGN KEY (CUSTOMER_NO) REFERENCES CUSTOMER(CUSTOMER_NO);


-- *** FOREIGN KEY 설정
-- DEPT_NO, GRADE_NO
ALTER TABLE USER_INFO ADD FOREIGN KEY (DEPT_NO) REFERENCES DEPARTMENT(DEPT_NO);
ALTER TABLE USER_INFO ADD FOREIGN KEY (GRADE_NO) REFERENCES GRADE(GRADE_NO);

-- PROJECT_MEMBERS : USER_NO, PROJ_NO
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);
ALTER TABLE PROJECT_MEMBERS ADD FOREIGN KEY (PROJ_NO) REFERENCES PROJECT(PROJ_NO);

-- PROJECT_TASKS : PROJ_NO
ALTER TABLE PROJECT_TASKS ADD FOREIGN KEY (PROJ_NO) REFERENCES PROJECT(PROJ_NO);

-- SCHEDULE : PROJ_NO, TASK_NO, USER_NO
ALTER TABLE SCHEDULE ADD FOREIGN KEY (PROJ_NO) REFERENCES PROJECT(PROJ_NO);
ALTER TABLE SCHEDULE ADD FOREIGN KEY (TASK_NO) REFERENCES PROJECT_TASKS(TASK_NO);
ALTER TABLE SCHEDULE ADD FOREIGN KEY (USER_NO) REFERENCES USER_INFO(USER_NO);

-- SCHEDULE_MEMBERS : SCHEDULE_NO
ALTER TABLE SCHEDULE_MEMBERS ADD FOREIGN KEY (SCHEDULE_NO) REFERENCES SCHEDULE(SCHEDULE_NO);

